#BlueJ class context
comment0.params=filename\ append
comment0.target=FileOutput(java.lang.String,\ boolean)
comment0.text=\r\n\ Constructor\ of\ a\ <code>FileOutput</code>\ object\ given\ a\ file\ name\ string.\r\n\ Setting\ append\ to\ true\ will\ open\ the\ file\ in\ append\ mode.\r\n
comment1.params=file\ append
comment1.target=FileOutput(java.io.File,\ boolean)
comment1.text=\r\n\ Constructor\ of\ a\ <code>FileOutput</code>\ object\ given\ a\ <code>File</code>\ object.\r\n\ Setting\ append\ to\ true\ will\ open\ the\ file\ in\ append\ mode.\r\n
comment10.params=d
comment10.target=void\ writeDouble(double)
comment10.text=\r\n\ Write\ a\ <code>double</code>\ value\ to\ a\ file.\r\n
comment11.params=c
comment11.target=void\ writeChar(char)
comment11.text=\r\n\ Write\ a\ <code>char</code>\ value\ to\ a\ file.\r\n
comment12.params=s
comment12.target=void\ writeString(java.lang.String)
comment12.text=\r\n\ Write\ a\ <code>String</code>\ value\ to\ a\ file.\r\n
comment13.params=
comment13.target=void\ writeEndOfLine()
comment13.text=\r\n\ Write\ an\ end-of-line\ marker\ to\ a\ file.\ \ This\ writes\ whatever\ characters\ represent\ the\r\n\ end-of-line\ marker\ on\ the\ operating\ system\ the\ program\ is\ run\ on.\r\n
comment14.params=message
comment14.target=void\ error(java.lang.String)
comment14.text=\r\n\ Deal\ with\ an\ error.\ \ All\ errors\ a\ terminal\ with\ this\ class.\r\n
comment2.params=filename
comment2.target=FileOutput(java.lang.String)
comment2.text=\r\n\ Constructor\ of\ a\ <code>FileOutput</code>\ object\ given\ a\ file\ name\ string.\r\n\ If\ the\ file\ already\ exists\ its\ existing\ contents\ will\ be\ overwritten.\r\n
comment3.params=file
comment3.target=FileOutput(java.io.File)
comment3.text=\r\n\ Constructor\ of\ a\ <code>FileOutput</code>\ object\ given\ a\ <code>File</code>\ object.\r\n\ If\ the\ file\ already\ exists\ its\ existing\ contents\ will\ be\ overwritten.\r\n
comment4.params=
comment4.target=void\ finalize()
comment4.text=\r\n\ Finalizer\ to\ close\ the\ file\ in\ case\ the\ using\ code\ fails\ to\ and\ a\ <code>FileOutput</code>\r\n\ object\ gets\ garbage\ collected.\r\n
comment5.params=
comment5.target=void\ flush()
comment5.text=\r\n\ Flush\ the\ associated\ writer.\r\n
comment6.params=
comment6.target=void\ close()
comment6.text=\r\n\ Close\ the\ file\ as\ it\ is\ finished\ with.\r\n
comment7.params=i
comment7.target=void\ writeInt(int)
comment7.text=\r\n\ Write\ an\ <code>int</code>\ value\ to\ a\ file.\r\n
comment8.params=l
comment8.target=void\ writeLong(long)
comment8.text=\r\n\ Write\ a\ <code>long</code>\ value\ to\ a\ file.\r\n
comment9.params=f
comment9.target=void\ writeFloat(float)
comment9.text=\r\n\ Write\ a\ <code>float</code>\ value\ to\ a\ file.\r\n
numComments=15
